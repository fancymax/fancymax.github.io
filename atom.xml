<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title><![CDATA[Programming is like Sex]]></title>
    <link>http://fancymax.github.io/</link>
    <atom:link href="//atom.xml" rel="self" type="application/rss+xml"/>
    <description></description>
    <pubDate>Sat, 16 Jan 2016 06:22:11 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title><![CDATA[OS X(Swift) Tutorial-1]]></title>
      <link>http://fancymax.github.io/2016/01/13/X-Swift/</link>
      <guid>http://fancymax.github.io/2016/01/13/X-Swift/</guid>
      <pubDate>Wed, 13 Jan 2016 06:50:23 GMT</pubDate>
      <description>
      <![CDATA[<p>国内针对OS X(Swift)的编程资料比较少，所以我想尝试着写一些从入门到深入的教程，这是第一篇。<br>]]>
      
      </description>
      <content:encoded><![CDATA[<p>国内针对OS X(Swift)的编程资料比较少，所以我想尝试着写一些从入门到深入的教程，这是第一篇。<br><a id="more"></a></p>
<h1 id="万事开头难">万事开头难</h1><p>学习一个新东西尤其如此。一个不好的开端很有可能导致整个学习计划的失败并且短时间内不会重新拾起。我自己就是一个典型案例。</p>
<p>第一次尝试学习OS X编程是在很早之前，当时出于好奇心的驱使买了一本《Objective-C编程》开始学，在某次坐火车回家的路上就把这本书通读了一遍，自认为看懂了Objective－C基于消息发送的设计理念，自信心爆棚，直接开始写我的<strong>第一个Cocoa应用</strong>,写的过程让我直接崩溃了。XCode、Cocoa、Objective-C没一个熟悉的，那种沮丧的感觉至今都还记得。那次挫败导致我的学习计划停滞了很长时间。</p>
<p>现在回头来看，当初失败的原因主要有三个：</p>
<ol>
<li>缺乏具体的目标，一旦遇到挫折就容易放弃了。所以我的建议是事先规划一个目标，比如我当初为了解决手动批量提交程序到svn的痛苦，学习用python写了一个自动提交的脚本，那个过程进步就很快。</li>
<li>缺乏趁手的工具，其实就是<strong>磨刀不负砍柴功</strong>这个道理，关于工具可以参考我前一篇博客。</li>
<li>缺乏靠谱的教程，这第一本书的作用就如同第一印象，如果这个基础没打好之后也很难提起兴趣去学了。</li>
</ol>
<h1 id="第一个Cocoa程序">第一个Cocoa程序</h1><p>在开始第一个程序之前，或许你应该先花一个小时熟悉了一下<a href="https://www.youtube.com/watch?v=t7xUvFs3cPI" target="_blank" rel="external">Swift的基本语法</a>和<a href="https://www.youtube.com/watch?v=I-VXHK4e8bs" target="_blank" rel="external">XCode的基本操作</a>。下面我们来创建一个最简单的Cocoa程序模版，选择OS X-&gt;Cocoa Application-&gt;Swift-&gt;输入project name。</p>
<p>在Swift2.0中用了<a href="http://stackoverflow.com/questions/27469436/what-is-use-of-nsapplicationmain-in-swift-programming-project-in-xcode" target="_blank" rel="external">@NSApplicationMain来简化程序的入口函数定义不用写main函数</a>。所以程序的主要逻辑写在AppDelegate.swift中，而程序的界面定义在MainMenu.xib中(包括主窗体和菜单)。</p>
<p>我门第一个Cocoa程序要做的事就是为后面开个好头，所以一开始我们就应用MVC模式来改造程序模版，</p>
<ul>
<li>第一步先创建一个MainWindowController.swift和MainWindowController.xib;</li>
<li>然后把MainMenu.xib中的主窗体删除，主窗体转移到MainWindowController.xib中;</li>
<li>最后就是要修改AppDelegate.swift中的代码，把整个功能串起来;</li>
</ul>
<p>原始模版代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">NSApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">NSObject</span>, <span class="title">NSApplicationDelegate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="preprocessor">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> window: <span class="type">NSWindow</span>!</span><br><span class="line"></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">applicationDidFinishLaunching</span><span class="params">(aNotification: NSNotification)</span></span> &#123;</span><br><span class="line">        <span class="comment">// Insert code here to initialize your application</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">applicationWillTerminate</span><span class="params">(aNotification: NSNotification)</span></span> &#123;</span><br><span class="line">        <span class="comment">// Insert code here to tear down your application</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>修改后的代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">NSApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">NSObject</span>, <span class="title">NSApplicationDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mainWindowController:<span class="type">MainWindowController</span>?</span><br><span class="line"></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">applicationDidFinishLaunching</span><span class="params">(aNotification: NSNotification)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> mainController = <span class="type">MainWindowController</span>()</span><br><span class="line">        mainController.showWindow(<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">self</span>.mainWindowController = mainController</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">applicationWillTerminate</span><span class="params">(aNotification: NSNotification)</span></span> &#123;</span><br><span class="line">        <span class="comment">// Insert code here to tear down your application</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>MainWindowController.swift的代码如下：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class <span class="type">MainWindowController</span>: <span class="type">NSWindowController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    override <span class="keyword">var</span> windowNibName:<span class="type">String</span>?&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MainWindowController"</span> //这里要和<span class="type">MainWindowController</span>.xib的名称对应</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func windowDidLoad() &#123;</span><br><span class="line">        super.windowDidLoad()</span><br><span class="line">        // <span class="type">Implement</span> this <span class="keyword">method</span> to handle <span class="type">any</span> initialization after your window controller's window has been loaded <span class="keyword">from</span> its nib file.</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>至此我们就完成了由模版程序向MVC程序架构方向的转化，后续的界面绘制和程序逻辑编写分别在MainWindowController.xib和MainWindowController.swift中编写即可。</p>
<p>最后放一个的示例程序<a href="https://github.com/fancymax/Cocoa-Learning/tree/master/1.RandomPassword" target="_blank" rel="external">Cocoa Learning-RandomPassword</a>，大家可以拿来参考一下。</p>
]]></content:encoded>
      <comments>http://fancymax.github.io/2016/01/13/X-Swift/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[最新OS X编程入门参考资料]]></title>
      <link>http://fancymax.github.io/2015/12/31/OS-X-learning/</link>
      <guid>http://fancymax.github.io/2015/12/31/OS-X-learning/</guid>
      <pubDate>Thu, 31 Dec 2015 13:10:45 GMT</pubDate>
      <description>
      <![CDATA[<p>iOS的开发特别火爆，OS X的却很冷淡。新手常常觉得OS X的开发难以入门，原因是资料特别少，包括当初的我在内。所以我整理了一些入门必备的工具 或 资源，希望对大家有所帮助。<br>]]>
      
      </description>
      <content:encoded><![CDATA[<p>iOS的开发特别火爆，OS X的却很冷淡。新手常常觉得OS X的开发难以入门，原因是资料特别少，包括当初的我在内。所以我整理了一些入门必备的工具 或 资源，希望对大家有所帮助。<br><a id="more"></a></p>
<ul>
<li><p>Dash:超级好用的离线文档搜索工具<a href="https://kapeli.com/dash" target="_blank" rel="external">Dash for OS X</a>。</p>
</li>
<li><p>科学上网:推荐用<a href="https://itxs.li" target="_blank" rel="external">土行孙</a>或者<a href="https://getlantern.org" target="_blank" rel="external">lantern</a>。</p>
</li>
<li><p>UI设计:OS X Human Interface Guidelines在iBook上可以找到，介绍OS X的界面设计规范。</p>
</li>
<li><p>Swift:The Swift Programming language同样在iBook上可以搜索到，先通篇浏览，后续遇到问题配合Dash去查。进阶的话可以看看喵神写的<a href="http://www.amazon.cn/Swifter-100个Swift-2-开发必备Tip-王巍/dp/B019CRN7TW/ref=sr_1_2?ie=UTF8&amp;qid=1451567750&amp;sr=8-2&amp;keywords=Swifter" target="_blank" rel="external">Swifter 100 tips</a>。</p>
</li>
<li><p>Cocoa:<a href="http://www.amazon.cn/Cocoa-Programming-for-OS-X-The-Big-Nerd-Ranch-Guide-Hillegass-Aaron/dp/0134076958/ref=sr_1_4?ie=UTF8&amp;qid=1451567670&amp;sr=8-4&amp;keywords=Cocoa" target="_blank" rel="external">Cocoa Programming for Mac OS X(5th)</a>第五版以上，里面用的是Swift讲解，介绍的例子通俗易懂，全书的例子做一遍下来，开发简单的OS X程序不成问题。进阶的话有Advanced Mac OS X Programming(2011)和Cocoa® Programming Developer’s Handbook(2010)。</p>
</li>
<li><p>自定义控件:<a href="https://www.cocoacontrols.com" target="_blank" rel="external">cocoacontrols</a>，网站收集了各种iOS和OS X的自定义控件，很有参考意义。</p>
</li>
</ul>
]]></content:encoded>
      <comments>http://fancymax.github.io/2015/12/31/OS-X-learning/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[12306PicSelect for OS X(Swift)]]></title>
      <link>http://fancymax.github.io/2015/12/31/12306PicSelect/</link>
      <guid>http://fancymax.github.io/2015/12/31/12306PicSelect/</guid>
      <pubDate>Thu, 31 Dec 2015 08:59:27 GMT</pubDate>
      <description>
      <![CDATA[<p>用于解析 12306 图片验证码位置的控件，可以很方便的集成到你的程序中。<br>]]>
      
      </description>
      <content:encoded><![CDATA[<p>用于解析 12306 图片验证码位置的控件，可以很方便的集成到你的程序中。<br><a id="more"></a><br>Demo:<br><img src="http://7xpbra.com1.z0.glb.clouddn.com/SelectImageDemo.jpg" alt="demo"></p>
<p>Github:<br><a href="https://github.com/fancymax/12306PicSelect" target="_blank" rel="external">https://github.com/fancymax/12306PicSelect</a></p>
<p>Something to learn:</p>
<ul>
<li>How to Creat a UserControl by inheritted a NSControl</li>
<li>How to handle with Mouse Clicked Event</li>
</ul>
]]></content:encoded>
      <comments>http://fancymax.github.io/2015/12/31/12306PicSelect/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[LunarCalendar for OS X(Swift)]]></title>
      <link>http://fancymax.github.io/2015/12/30/lunarCalendar/</link>
      <guid>http://fancymax.github.io/2015/12/30/lunarCalendar/</guid>
      <pubDate>Wed, 30 Dec 2015 10:58:00 GMT</pubDate>
      <description>
      <![CDATA[<p>Pure Native and Write by Swift<br>]]>
      
      </description>
      <content:encoded><![CDATA[<p>Pure Native and Write by Swift<br><a id="more"></a><br>Demo:<br><img src="http://7xpbra.com1.z0.glb.clouddn.com/LunarCalendar.jpg" alt="demo"></p>
<p>Github:<br><a href="https://github.com/fancymax/LunarCalendar" target="_blank" rel="external">https://github.com/fancymax/LunarCalendar</a></p>
<p>Something to learn:</p>
<ul>
<li>Autolayout</li>
<li>How to Create a new Cocoa UserControl by ViewController</li>
<li>How to convert Solar Calendar to Lunar Calendar</li>
<li>How to draw line or circle in Cocoa</li>
</ul>
]]></content:encoded>
      <comments>http://fancymax.github.io/2015/12/30/lunarCalendar/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[我的2015]]></title>
      <link>http://fancymax.github.io/2015/12/29/my2015/</link>
      <guid>http://fancymax.github.io/2015/12/29/my2015/</guid>
      <pubDate>Tue, 29 Dec 2015 12:30:05 GMT</pubDate>
      <description>
      <![CDATA[<p>年末最适合像这样，拿杯最喜欢的饮料，调暗灯光，舒舒服服的靠在沙发上，想一想这过去的十二月你都做了什么。<br>]]>
      
      </description>
      <content:encoded><![CDATA[<p>年末最适合像这样，拿杯最喜欢的饮料，调暗灯光，舒舒服服的靠在沙发上，想一想这过去的十二月你都做了什么。<br><a id="more"></a><br>记忆中的关键词有：欢乐谷跨年、陈奕迅演唱会、香港代购、去女朋友家过年、穿越东西冲、去香港的南丫岛、五一长假、买房装修搬家、玩PS4、开发12306ForMac。</p>
<p>总的感觉自己这一年过的还是比较滋润的。<br>尤其是前半年玩的比较多，印象最深的就是五一请了9天假和女友去了一趟成都和重庆玩了九寨沟、峨眉山等地。虽然只有短短的9天，但是感觉好像放了长长的一个寒假一样，特别的放松，同时也加深了女友的感情。</p>
<p>后半年相对就平淡和辛苦一些，主要原因就是折腾着买房了，同时还有一堆装修搬家的事情，越是在这种时候越是能体现出有女朋友的好处了。<br>在我们马上要搬入新家的前一个月，前房东通知我必须要搬走，而且没得商量，不得已我们只能再找个房子住一个月，当时真是别提多闹心了。不过还好有个人可以一起承担，郁闷减半。</p>
<p>经过两个多月的努力新房总算搞定，顺利入住。现在再去想想以前那些租房住的痛苦回忆，恍若隔世一般。</p>
<p>另外，今年开始计划着做一些个人作品，比如12306ForMac，它是一款针对Mac的火车票抢票客户端，目前完成了50%左右。<br>同时为了方便后期的产品的推广和维护，我开通了fancywt.cn这个博客，当然我也会把平常的一些想法和感悟总结在这里。</p>
<p>2015是个充满回忆的一年，期待我的2016更加精彩。</p>
]]></content:encoded>
      <comments>http://fancymax.github.io/2015/12/29/my2015/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[12306forMac 开发日记-上]]></title>
      <link>http://fancymax.github.io/2015/12/20/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0-%E4%B8%8A/</link>
      <guid>http://fancymax.github.io/2015/12/20/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0-%E4%B8%8A/</guid>
      <pubDate>Sun, 20 Dec 2015 02:37:22 GMT</pubDate>
      <description>
      <![CDATA[<p>先谈谈做 Mac 版的初衷(很多人说市面上已经有那么多抢票软件了，你为什么还要重新发明轮子？)</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>先谈谈做 Mac 版的初衷(很多人说市面上已经有那么多抢票软件了，你为什么还要重新发明轮子？)</p>
<a id="more"></a>
<p>最早是因为女朋友，她家是湖南的。从深圳到湖南那票叫一个难买。<br>去年别人介绍 买了一款心蓝的订票软件（可惜没有 Mac 版的）,装在我的虚拟机上，刷票刷了两个月总算买到回湖南的两张高铁票。<br>我的 Mac基本上开着虚拟机开了两个月没停，挺心疼的。另外女朋友用macbook基本没法开虚拟机，而我实在不想为了这个搞个双系统。 所以就想搞个 Mac 版的订票软件，借鉴一下心蓝的一些功能。</p>
<h1 id="Mac版的定位">Mac版的定位</h1><p>抢票的话我感觉基本看运气和软件关系不是太大，用手机抢完全 OK ，个人认为 Mac 版的功能应该偏重于检票。实时监控 60 天，基本上 90%可以买到票。<br>这是我在<a href="http://www.v2ex.com/t/243795" target="_blank" rel="external">v2ex上做的调查</a>，可以看出这东西还是挺多人需要滴。</p>
<h1 id="准备工作">准备工作</h1><p>如何开始呢，这里着重列出自己学习过程中感觉比较有用的东西供大家参考。</p>
<ul>
<li><p>关于Mac<br>苹果开发，最好就是买个Mac，Mac的型号不少，我主要推荐以下两款：</p>
<ul>
<li>预算够就直接买Macbook Pro 15寸(推荐16G内存)，大概12~15K左右，屏幕大性能高，便携性好，跑个虚拟机里面再开VS都是小意思。</li>
<li>如果预算不够，可以考虑买Mac mini主机(8G内存+SSD或Fushion Drive)，差不多5~6k，需要外接一个显示器。</li>
</ul>
</li>
<li><p>关于工具</p>
<ul>
<li>Dash<br>这个绝对是神器,超级好用的离线文档搜索工具。免费版有8秒的搜索等待。<br><img src="http://images2015.cnblogs.com/blog/708791/201511/708791-20151111174224009-881586110.png" alt=""></li>
<li>科学上网<br>这个不用我多说，我推荐用土行孙，大家自己上网搜吧。</li>
</ul>
</li>
<li><p>相关书籍</p>
<ul>
<li><p>OS X Human Interface Guidelines<br>在iBook 上可以找到，介绍OS X的界面设计规范。</p>
</li>
<li><p>The swift Programming language<br>同样在iBook上可以搜索到，主要就是介绍Swift语言，可以先通篇浏览一遍，后续遇到问题再去查。同时配合Dash查Cocoa的API，Perfect。</p>
</li>
<li><p>Cocoa Programming for Mac OS X(5th)<br>第五版以上，里面用的是Swift讲解，介绍的例子通俗易懂，全书的例子做一遍下来，开发简单的OS X程序不成问题。</p>
</li>
</ul>
</li>
</ul>
<h1 id="开发进度">开发进度</h1><p>经过三四个月的时间，总算是在mac上实现了订票的功能。最花时间的是两方面：</p>
<ul>
<li>一是12306的接口，各种坑，老是被封IP导致调试困难。</li>
<li>另外一个就是Cocoa，写界面相当麻烦，而且是现学现卖，一路过来特别折腾。</li>
</ul>
<p>下面我做的一些界面截图，留个纪念。<br><img src="http://images2015.cnblogs.com/blog/708791/201512/708791-20151215213943631-952430701.jpg" alt=""></p>
<p><img src="http://images2015.cnblogs.com/blog/708791/201512/708791-20151215213951724-2135344988.jpg" alt=""></p>
<p><img src="http://images2015.cnblogs.com/blog/708791/201512/708791-20151215213959131-1473971103.jpg" alt=""></p>
<p><img src="http://images2015.cnblogs.com/blog/708791/201512/708791-20151215214005271-1633616139.jpg" alt=""></p>
<p>回头想想这三个月进步还挺大，基本熟悉了Swift、Objective-c、以及Cocoa API，对订票的流程也混熟了。还有好多想法，但是总觉得时间太不够用了，只能用业余的时间来弄弄。</p>
<p>不管怎么说还是要继续努力，争取早日完成。我的目标是上架Mac Appstore，并达到10000用户量。</p>
]]></content:encoded>
      <comments>http://fancymax.github.io/2015/12/20/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0-%E4%B8%8A/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[AutoCompleteTextField for OS X(Swift)]]></title>
      <link>http://fancymax.github.io/2015/08/24/autocompletetextfield-for-os-x/</link>
      <guid>http://fancymax.github.io/2015/08/24/autocompletetextfield-for-os-x/</guid>
      <pubDate>Mon, 24 Aug 2015 08:08:15 GMT</pubDate>
      <description>
      <![CDATA[<p>AutoCompleteTextField是基于NSTextField实现的自动补齐控件。<br>]]>
      
      </description>
      <content:encoded><![CDATA[<p>AutoCompleteTextField是基于NSTextField实现的自动补齐控件。<br><a id="more"></a></p>
<h2 id="Demo">Demo</h2><p>我做的<a href="https://github.com/fancymax/AutoCompleteTextField" target="_blank" rel="external">Demo</a>通过这个控件实现类似12306上选择站点时的智能提示，功能上支持 全拼、简拼、汉字，效果如下：<br><img src="http://7xpbra.com1.z0.glb.clouddn.com/AutoCompleteTextfield.jpg" alt="demo"></p>
<h2 id="原理和收获：">原理和收获：</h2><p>原理也比较简单：</p>
<ol>
<li>捕捉用户的 keyup 事件来增加智能提示逻辑。</li>
<li>识别用户按下的键值，弹出 popover ，给出智能提示，比如用户按下 s h ，则给出提示 “上海”</li>
<li>当用户按下 enter 键，则把提示值输出到 TextField 的显示框上。</li>
</ol>
<p>通过实现这个控件，可以学到什么？</p>
<ol>
<li>了解 Cocoa 控件体系的继承层级。</li>
<li>了解 Cocoa 中的 delegate 模式(主程序与 AutoCompleteTextField 之间通过 delegate 模式解除耦合)。</li>
</ol>
]]></content:encoded>
      <comments>http://fancymax.github.io/2015/08/24/autocompletetextfield-for-os-x/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[敏捷开发培训总结]]></title>
      <link>http://fancymax.github.io/2014/05/22/summaryOnSoftDevelopment/</link>
      <guid>http://fancymax.github.io/2014/05/22/summaryOnSoftDevelopment/</guid>
      <pubDate>Thu, 22 May 2014 06:08:18 GMT</pubDate>
      <description>
      <![CDATA[<p>前段时间参加了两天敏捷开发管理培训，收获挺大，在这里做一下总结。</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>前段时间参加了两天敏捷开发管理培训，收获挺大，在这里做一下总结。</p>
<a id="more"></a>
<h2 id="理解敏捷">理解敏捷</h2><p>整个培训过程中一直穿插着敏捷软件开发的原则进行讲解，这里摘录给我感触最深的几个：</p>
<ul>
<li>我们最重要的目标，是通过持续不断地及早交付有价值的软件使客户满意，经常地交付可工作的软件，相隔几星期或一两个月，倾向于较短的周期。</li>
<li>业务人员和开发人员必须相互合作，项目中的每一天都不例外。</li>
<li>团队定期反思如何能提高成效，并依此调整自身的举止表现。</li>
<li>激发个体的斗志，以他们为核心搭建项目。提供所需的环境和支援，辅以信任，从而达成目标。</li>
</ul>
<p>敏捷流派主要有两个：Scrum 和 极限编程。Scrum侧重项目协作流程，极限编程侧重提高编程效率的技术实践。两者应该相辅相成。这里着重讲讲Scrum。</p>
<h2 id="团队与角色">团队与角色</h2><p>Scrum中有Product Owner、Team、Scrum Master三类角色。一个好的Scrum团队以下特点：</p>
<ul>
<li>通常5~9人；</li>
<li>跨职能，跨模块人员构成；</li>
<li>成员应全职投入；</li>
<li>团队自组织管理；</li>
<li>迭代内保持团队成员稳定。</li>
</ul>
<p>做好一个Product Owner要点如下：</p>
<ul>
<li>定义产品功能；</li>
<li>定义产品发布的日期和功能；</li>
<li>对产品的投入产出比负责；</li>
<li>根据市场情况对需求排列优先级；</li>
<li>如果需要，在每个迭代合理调整产品特性及其优先级；</li>
<li>介绍或拒绝开发团队的工作成果。</li>
</ul>
<p>Scrum Master要引导团队自己去找答案，而不是做一个发号司令的人，做好一个Scrum Master要点如下：</p>
<ul>
<li>Scrum正常运作的守护者；</li>
<li>激发团队创造力；</li>
<li>改善开发团队的外部环境；</li>
<li>辅导团队提升运作效率；</li>
<li>排除团队遇到的困难；</li>
<li>保持团队紧密合作；</li>
</ul>
<p>Team就是团队中的开发、测试或ui设计人员。</p>
<h2 id="需求管理">需求管理</h2><p>Scrum通过编写用户故事来管理需求，好的用户故事的原则如下：</p>
<ul>
<li>Independent独立的；</li>
<li>Negotiable：可讨论的；</li>
<li>Valuable：对用户或客户有价值的；</li>
<li>Estimatable：可估计的；</li>
<li>Small：小的；</li>
<li>Testable：可测试的。</li>
</ul>
<p>之后要进行工作量估算，Product Owner(业务人员)必须在场梳理需求，每个项目成员针对用户故事的疑问向Product Owner提问，所有人弄清楚需求后开始。</p>
<p>大家先找一个参照需求，确定它的工作量，然后其他的需求就按照这个参照需求来估计，这种相对估计法确保每个人估计出来的工作量是一致的。</p>
<p>使用扑克牌，大家同时给出需求的估计值（而不是轮流进行），估值最高和最低的必须分别给出原因，这样做的好处让大家都独立思考。通过多轮估值让所有人了解需求，并估算出一个较为合理的工作量。</p>
<h2 id="Scrum中的各项活动">Scrum中的各项活动</h2><p>简单来说，划分如下</p>
<p>项目计划|<br>Sprint0|<br>Sprint1|<br>Sprint2|<br>Sprint3|<br>项目总结|</p>
<p>按一个迭代周期来说，主要划分如下：迭代计划和评审一般要占用两个小时，而站立会议一般15分钟。</p>
<p>迭代计划1|<br>迭代计划2|<br>站立会议|<br>…|<br>站立会议|<br>迭代评审|<br>迭代回顾|</p>
<p>Spint0要做一些准备活动，如高层的业务流程图、初始的用户故事列表、测试策略、发布计划、团队建设、技术架构的选择、设计UI的风格等。</p>
<h3 id="站立会议">站立会议</h3><p>晨会的要点：</p>
<ul>
<li>轮流发言，持Token者才可以发言；</li>
<li>不讨论深入细节；</li>
<li>不是对领导汇报，让团队中每个人都了解你的发言；</li>
<li>不能单独讨论，自发的有序的进行发言；</li>
<li>时间在15分钟以内。</li>
</ul>
<p>站立晨会的三个经典问题：昨天我完成了哪些工作；明天我打算做什么；完成我的目标是否存在什么障碍。<br>站立晨会的目的不是为了让大家都回答那三个问题，而是让团队围绕这三个问题，制定当天的工作计划并暴露问题。</p>
<h3 id="迭代验收和回顾">迭代验收和回顾</h3><p>迭代验收会议，通过演示可工作的软件检查需求是否满足客户要求；迭代验收的好处：</p>
<ul>
<li>通过演示可工作的软件来确认项目的进度，具有真实性；</li>
<li>能尽早获得用户对产品的反馈，使产品更贴近客户需求。</li>
<li>收集反馈。</li>
</ul>
<p>迭代回顾会议，目的是分享好的经验和发现改进点，促进团队不断进步，迭代回顾的好处：</p>
<ul>
<li>激励团队成员；</li>
<li>帮助团队挖掘优秀经验并继承；</li>
<li>避免团队犯重复的错误；</li>
<li>营造团队自主改进的氛围。</li>
</ul>
<h2 id="利用敏捷改进现有工作">利用敏捷改进现有工作</h2><p>即使不使用敏捷方式开发，也可以利用它的一些好的想法和实践可以用来提升目前的工作效率。</p>
<ul>
<li>比如敏捷开发中如何调动团队积极性，让每个人看到的是团队目标，而不是个人目标。</li>
<li>比如经常地交付可工作的软件：以此提高软件开发的质量和可交付性。</li>
<li>比如借鉴敏捷中设定Sprint(冲刺)的开发过程，调动开发人员的积极性以及明确每个开发阶段的目的性。</li>
</ul>
<h2 id="其他问题">其他问题</h2><ul>
<li>需求文档 或者 使用说明文档 写了100多页，但是写完之后基本没人看，这样的问题应该很普遍，该如何解决？<br>把Word文档迁移到Wiki上，大文档切细分成一个个独立的Wiki页面，Wiki可以统计页面的访问次数，有了足够的数据支撑之后就可以把访问次数少的页面去掉，以此来精简文档，这样留下来的文档内容就是真正有用的。</li>
</ul>
<ul>
<li>业务部门的需求太多而且每个都非常紧急，怎么处理？<br>业务部门拉一个人对需求按价值进行排序；需求收集例行化，主动收集，需求有一定的清晰度；回顾哪些需求不重要，做为武器。</li>
</ul>
]]></content:encoded>
      <comments>http://fancymax.github.io/2014/05/22/summaryOnSoftDevelopment/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[浅谈研发项目经理]]></title>
      <link>http://fancymax.github.io/2014/04/20/talkAboutPM/</link>
      <guid>http://fancymax.github.io/2014/04/20/talkAboutPM/</guid>
      <pubDate>Sun, 20 Apr 2014 06:18:21 GMT</pubDate>
      <description>
      <![CDATA[<p>市场上大致分为三种公司</p>
<ul>
<li><p>第一种是项目型公司，这样的公司没有自己的产品，每次都要整个项目重新开始没有积累，所以这样的公司是赚钱最累的，这样的公司只需要项目经理。</p>
</li>
<li><p>第二种是产品型公司，这样的公司可以大批量复制产品然后卖给各地的用户，这样的公司需要产品经理和项目经理。产品经理需要把控产品从需求到销售的整个流程。</p>
</li>
<li><p>第三种公司是赚钱最轻松的，即运营型公司比如“中石油”这样的资源型垄断企业。</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>市场上大致分为三种公司</p>
<ul>
<li><p>第一种是项目型公司，这样的公司没有自己的产品，每次都要整个项目重新开始没有积累，所以这样的公司是赚钱最累的，这样的公司只需要项目经理。</p>
</li>
<li><p>第二种是产品型公司，这样的公司可以大批量复制产品然后卖给各地的用户，这样的公司需要产品经理和项目经理。产品经理需要把控产品从需求到销售的整个流程。</p>
</li>
<li><p>第三种公司是赚钱最轻松的，即运营型公司比如“中石油”这样的资源型垄断企业。</p>
<a id="more"></a>
</li>
</ul>
<p>产品经理 和 项目经理的区别？</p>
<p>先下个定义：<strong>产品经理 = Market PM  and  R&amp;D PM</strong>，即解决市场需求的项目经理 加上 研发项目经理 大致等于一个产品经理。</p>
<p>在公司前期只有一个产品的时候，公司老板基本就属于产品经理。当公司的产品多起来之后，由于老板精力有限就需要有产品经理来负责产品的整个流程。但是由于产品经理对人的要求比较高，所以有的公司用另外一个方法来替代，及市场需求方面的项目经理 加上 研发项目经理 来代替产品经理。</p>
<h3 id="项目经理的职责">项目经理的职责</h3><p>本文介绍的主要是研发项目经理，他的职责最重要的有三点：</p>
<ul>
<li>拥有良好的沟通能力。 </li>
<li>善于协调并行工作。 </li>
<li>高效决策，快速实施。</li>
</ul>
<p>其中协调并行工作非常重要，需要你做好计划，并且认识到并行工作可以大大的提高效率。</p>
<h3 id="如何锁定目标">如何锁定目标</h3><p>项目经理最需要关注的四个因素，STQC-范围、时间、质量、成本，又俗称<strong>多，快，好，省</strong>。不同的项目要求不一样，比如</p>
<blockquote>
<p>在华为最开始要抢占交换机市场的时候，时间是最重要，你的产品必须第一时间占住这个坑，因为是极短的时间做出来的产品，所以华为这个时候的交换机产品就经常出问题，经常看到华为的研发人员直接住到调试现场来弥补产品的质量问题。<br>而后期当华为的交换机产品要进军国外市场的时候，这时候产品的质量是最重要的。因为一旦质量出现问题，可能会出现一系列很严重的索赔问题。</p>
</blockquote>
<p>所以做为一个研发项目经理，首先需要对这款产品有个清晰的认识，要认识到产品最关键的因素是什么，有可能是“时间”，也可能是“质量”，也可能是“功能”。</p>
<h3 id="如何收集需求">如何收集需求</h3><p>需求收集主要来自于客户 和竞争对手。在对客户进行需求收集的时候需要注意 应该提一些广泛的、开放式的问题，比如：历史产品使用的美好回忆；使用产品失败的经历描述等。</p>
<p>一款产品只有找准定位，有所创新才有可能成功。当然如果一个类型的产品已经创新到没有什么可以创新的时候，这样情况下可能只能拼价格了，就好像目前的PC行业，索尼为什么PC业务做不下去了，而苹果的mac反而比以前卖的更好。</p>
<h3 id="如何估计工作量">如何估计工作量</h3><p>什么是工作量和工期，举个例子</p>
<blockquote>
<p>比如我一个人吃一顿饭需要半小时，那我吃饭的工作量就是半小时，然后我和另外一个人边聊天边吃饭需要两个小时，这时候我吃饭的工作量其实还是半小时，但是工期就变成两个小时了。</p>
</blockquote>
<p>工作量估计的时候</p>
<ul>
<li>应该让某项活动负责人参与该项活动的工期估计；</li>
<li>可以任命一位有经验的人进行所负责项目的工期估计； </li>
<li>历史数据可以作为参考； </li>
<li>估计应既富于挑战性，又考虑实际情况。</li>
</ul>
<h3 id="如何维护老产品">如何维护老产品</h3><p>当研发项目团队完成产品开发之后，可能需要进行新产品的开发，这时候比较好的做法就在PDT团队中挑选1~2位有经验的老员工 再带上几个新员工 组成LMT(生命周期管理团队) 对老产品进行维护。</p>
<p>这样当老产品出现问题的时候，可以先由LMT团队进行处理，形成FAQ，相当于一个防火墙的作用，这样减少对转入新产品开发的PDT团队的影响。</p>
<p>先说这么多，未完待续~~</p>
]]></content:encoded>
      <comments>http://fancymax.github.io/2014/04/20/talkAboutPM/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[浅谈WPF中的MVVM框架--MVVMFoundation]]></title>
      <link>http://fancymax.github.io/2014/04/19/%E6%B5%85%E8%B0%88WPF%E4%B8%AD%E7%9A%84MVVM%E6%A1%86%E6%9E%B6-MVVMFoundation/</link>
      <guid>http://fancymax.github.io/2014/04/19/%E6%B5%85%E8%B0%88WPF%E4%B8%AD%E7%9A%84MVVM%E6%A1%86%E6%9E%B6-MVVMFoundation/</guid>
      <pubDate>Sat, 19 Apr 2014 14:22:25 GMT</pubDate>
      <description>
      <![CDATA[<p>微软对于WPF技术的构想是很宏大的，可惜普及率不高，不过如果你要做Windows客户端开发的话WPF技术还是值得一学的。<br>]]>
      
      </description>
      <content:encoded><![CDATA[<p>微软对于WPF技术的构想是很宏大的，可惜普及率不高，不过如果你要做Windows客户端开发的话WPF技术还是值得一学的。<br><a id="more"></a><br>什么是WPF，请看下图<br><img src="http://images.cnitblog.com/blog2015/708791/201504/201140330112092.jpg" alt="what is WPF" align="center"></p>
<h1 id="什么是MVVM模式">什么是MVVM模式</h1><p>简单来说它是一种高级的UI设计模式。据我所知目前还运用在一些js框架中，比如<strong>AngularJS</strong>。其他的UI设计模式还包括MVC、MVP，个人觉得最强大的还是MVVM。</p>
<p>MVVM主体框架如下图：</p>
<p><img src="http://images.cnitblog.com/blog2015/708791/201504/201225530274012.jpg" width="500" height="400" alt="what is MVVM" align="center"></p>
<blockquote>
<ul>
<li>The Model is the entity that represents the business concept; it can be anything from a simple customer entity to a complex stock trade entity .</li>
<li>The View is the graphical control or set of controls responsible for rendering the Model data on screen .A View can be a WPF window, a Silverlight page, or just an XAML data template control .</li>
<li>The ViewModel is the magic behind everything .The ViewModel contains the UI logic, the commands, the events, and a reference to the Model .</li>
<li>In MVVM, the ViewModel is not in charge of updating the data displayed in the UI—thanks to the powerful data-binding engine provided by WPF and Silverlight, the ViewModel doesn’t need to do that .This is because the View is an observer of the ViewModel, so as soon as the ViewModel changes, the UI updates itself .For that to happen, the ViewModel must implement the INotifyPropertyChangedinterface and fire the PropertyChangedevent .</li>
</ul>
</blockquote>
<p>简单翻译一下（不全）</p>
<blockquote>
<ul>
<li>The Model 代表业务逻辑的实体类，可以是一个简单的顾客实体类，也可以是一个复杂的股票交易实体类。</li>
<li>The View 代表一个用户界面控件 …</li>
<li>The ViewModel 包括各种逻辑、命令、事件以及实体类的引用。</li>
</ul>
</blockquote>
<h1 id="什么是MVVMFoundation">什么是MVVMFoundation</h1><p><a href="http://mvvmfoundation.codeplex.com" target="_blank" rel="external">MVVMFoundation</a>是一个最简单的MVVM框架，官方介绍如下：</p>
<blockquote>
<p>MVVM Foundation is a library of classes that are very useful when building applications based on the Model-View-ViewModel philosophy. The library is small and concentrated on providing only the most indispensable tools needed by most MVVM application developers</p>
</blockquote>
<p>MVVMFoundation包含四大模块：</p>
<ul>
<li><p>ObservableObject：这里相当于ViewModelBase的概念，每一个ViewModel继承自该类，调用完成之后立即释放，防止内存泄露。</p>
</li>
<li><p>RelayCommand接口：封装command的声明，包括execution执行逻辑,可选的can-execute逻辑等。外部只需要实例化并Binding就可以简单使用。</p>
</li>
<li><p>Messenger:这里主要用在各种不同的ViewModel之间通信（比如相互关联的ViewModel、主从ViewModel等），当然也可以扩展成ViewModel与View之间进行通信。</p>
</li>
<li><p>PropertyObserver：主要是对INotifyPropertyChanged.PropertyChanged进行封装，可以通过其对某个对象的属性变更注册回调函数，当属性变更时便触发回调函数。</p>
</li>
</ul>
<h1 id="ObservableObject">ObservableObject</h1><p>实现ViewModel中的属性改变通知到绑定的控件的方法，相当于是所有Viewmodel的基类。</p>
<ol>
<li><p>使用时调用OnPropertyChange方法，则后台数据变化即可通知界面刷新</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> UserName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>.user.UserName; &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.user.UserName = <span class="keyword">value</span>;</span><br><span class="line">	    OnPropertyChanged(<span class="string">"UserName"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>属性在View界面的绑定</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">TextBox</span> <span class="keyword">Text</span>=<span class="string">"&#123;Binding UserName&#125;"</span> /&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="RelayCommand">RelayCommand</h1><p>用于在ViewModel中定义View中绑定的命令，代替了以前Winform的Click事件。</p>
<ol>
<li><p>在ViewModel中定义Command</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ICommand BrowseImageCommand</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> ICommand(BrowseImage); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BrowseImage</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在View中的按钮关联此Command</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button <span class="variable">Content=</span><span class="string">"浏览..."</span> <span class="variable">Command=</span><span class="string">"&#123;Binding BrowseImageCommand&#125;"</span>/&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Messenger">Messenger</h1><p>可用于ViewModel之间的信息传递，可以用于ViewModel和View之间的信息传递。</p>
<ol>
<li><p>定义信息传输类</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ViewModelCommunication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">ViewModelCommunication</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Messaging = <span class="keyword">new</span> Messenger();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Messenger Messaging &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> DataIDInChanged &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="string">"DataIDInChanged"</span>; &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在需要通知的类中注册要通知的信息</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ViewModelCommunication.Messaging.Register<span class="params">(ViewModelCommunication.DataIDInChanged,</span><br><span class="line">        <span class="params">(Action&lt;string&gt;)</span><span class="params">(param =&gt; SetLastSelectedDataID<span class="params">(param)</span>)</span>)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当对应的消息出现时，通知已经注册的类</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ViewModelCommunication</span><span class="class">.Messaging</span><span class="class">.NotifyColleagues</span>(<span class="tag">ViewModelCommunication</span><span class="class">.DataIDInChanged</span>, </span><br><span class="line">        <span class="tag">DataID</span><span class="class">.ToString</span>());</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="PropertyObserver">PropertyObserver</h1><p>主要用于对对象的属性监听，属性变更后可触发已注册的回调函数。</p>
<ol>
<li><p>注册要监听对象的属性及回调函数</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PropertyObserver&lt;UserInfoViewModel&gt; userInfoAfterObserver;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainWindowViewModel</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    UserInfoBefore = <span class="keyword">new</span> UserInfoViewModel();</span><br><span class="line">    userInfoAfterObserver = <span class="keyword">new</span> PropertyObserver&lt;UserInfoViewModel&gt;(UserInfoAfter)</span><br><span class="line">        .RegisterHandler(UserInfo =&gt; UserInfo.Age, <span class="keyword">this</span>.AgeChangedCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现回调函数</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">AgeChangedCallback</span><span class="params">(UserInfoViewModel userInfo)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    MessageBox.Show(<span class="string">"Property Age changed"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>以上就是MVVMFoundation框架的主要使用方法，感兴趣的人可以用用看～欢迎留言交流心得～</p>
]]></content:encoded>
      <comments>http://fancymax.github.io/2014/04/19/%E6%B5%85%E8%B0%88WPF%E4%B8%AD%E7%9A%84MVVM%E6%A1%86%E6%9E%B6-MVVMFoundation/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[成长与感悟--工作两年半]]></title>
      <link>http://fancymax.github.io/2013/12/19/%E6%88%90%E9%95%BF%E4%B8%8E%E6%84%9F%E6%82%9F-%E5%B7%A5%E4%BD%9C%E4%B8%A4%E5%B9%B4%E5%8D%8A/</link>
      <guid>http://fancymax.github.io/2013/12/19/%E6%88%90%E9%95%BF%E4%B8%8E%E6%84%9F%E6%82%9F-%E5%B7%A5%E4%BD%9C%E4%B8%A4%E5%B9%B4%E5%8D%8A/</guid>
      <pubDate>Thu, 19 Dec 2013 14:19:18 GMT</pubDate>
      <description>
      <![CDATA[<p>13年年初的时候，机缘巧合负责了一个较大的项目。在这之前我都是单枪匹马，这是我第一次负责团队型的项目。记得当时压力很大，从3月~7月我的月平均加班时间超过了90个小时。还好最后功夫不负有心人，项目历时7个月顺利完成并部署，得到了用户的肯定。</p>
<p>以下是我在项目过程中的一些总结和思考，欢迎拍砖~</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>13年年初的时候，机缘巧合负责了一个较大的项目。在这之前我都是单枪匹马，这是我第一次负责团队型的项目。记得当时压力很大，从3月~7月我的月平均加班时间超过了90个小时。还好最后功夫不负有心人，项目历时7个月顺利完成并部署，得到了用户的肯定。</p>
<p>以下是我在项目过程中的一些总结和思考，欢迎拍砖~</p>
<a id="more"></a>
<h2 id="直接跳进深水区">直接跳进深水区</h2><p>这是学习新事物的一种最直接，也最冒险的方法。<br>选择一项新技术，比如F#，基于实际的时间表，在真实的项目中使用它。这会带来压力，但如果运用得当，将特别有效率。</p>
<p>当时我在项目的过程中，直接学习了项目管理和各种要使用的新技术，边学边用，效率奇高无比。当然压力也很大，当时想的是项目做失败就直接离职了。</p>
<h2 id="做计划的重要性">做计划的重要性</h2><p>以前做小项目的时候没有认识到计划的重要性。然后在做大项目中吃了很多亏，才认识到计划的重要性。</p>
<p>现在认识到无论是针对日常工作和学习都要有个计划。</p>
<blockquote>
<p>比如：以前我要学习一个技术，不管三七二十一马上开始，恨不得一口气吃成胖子；现在的我就会计划几个阶段，每个阶段有个目标。</p>
</blockquote>
<h2 id="一次只能做好一件事">一次只能做好一件事</h2><p>当时项目初期时分工不明确，有很多紧急的任务堆积在我身上。当时我明显感觉脑子转不过来，而且多个任务互相影响压力巨大，怎么办？</p>
<ul>
<li>我先去寻找问题的解决思路，有了思路解决后续就交给有空余时间的人处理，自己要抽身出来协调项目工作。</li>
<li>先把简单的实现，后面再集中火力攻克难关。</li>
</ul>
<p>另外保证项目组成员一个阶段只做一件事。这样提高了效率，减轻了压力，也加快了项目的进展。</p>
<h2 id="享受过程">享受过程</h2><p>需要认识到到达目标之前的曲折性。<strong>要有持续改进与提高的心态，而不是想着一开始就做的完美</strong>。<br>否则一开始就要达到完美的目标，最后极可能导致失败。</p>
<p>当时经常性的会有非常沮丧的心理，总觉得项目要失败，后来总结了以下几点安慰自己：</p>
<ul>
<li>接受现实（改变心态，告诉自已，是的我现在是克服不了，我也没有能力处理这个事情）</li>
<li>将消极的情况变为积极，找到失败的闪光点和机会（虽然的败了，这是成长的机会，让我更了解自已）</li>
<li>分心，将注意力转向别处，但不是逃避（总是执着于分析每一种感情，想法是有害的，反复思考并不一定对人有帮助，可以先听听音乐，跑跑步，与别人交流交流，回头再来思考，也许有更好的点子）。</li>
</ul>
<h2 id="关于坚持">关于坚持</h2><p>如果觉得做不下去了，就硬着头皮坚持做，然后就类似于麻木了，适应了，那种望而却步的感觉会逐渐自动退去。惊人的简单，但事实就是如此，硬着头皮，过了那个情绪上最艰难的时候，也就适应了。当然在坚持的过程中，还需要思考如何改进，如何提高效率（通过读书或向别人学习）。</p>
<h2 id="关于学习和培养兴趣">关于学习和培养兴趣</h2><p>对未来的一些规划，比如</p>
<ul>
<li>学习一门新语言</li>
<li>掌握一些通用的技术，比如正则表达式、进程间通信、文件存储 </li>
<li>掌握通用的软件思想，比如设计模式，比如MVC、MVVM </li>
<li>使用牛逼的编辑器，比如vim</li>
<li>跟踪技术博客</li>
</ul>
<p>借用一句话来结尾：</p>
<blockquote>
<p>无论怎样学习技术是一种态度，无论你在什么公司、位于何种职位、从事何种技术，学习前辈的先进方法，永远是一条最快的提升捷径。站在巨人的肩膀上，迎接世界的挑战。</p>
</blockquote>
]]></content:encoded>
      <comments>http://fancymax.github.io/2013/12/19/%E6%88%90%E9%95%BF%E4%B8%8E%E6%84%9F%E6%82%9F-%E5%B7%A5%E4%BD%9C%E4%B8%A4%E5%B9%B4%E5%8D%8A/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[我的电脑编年史]]></title>
      <link>http://fancymax.github.io/2013/09/24/myComputerHistory/</link>
      <guid>http://fancymax.github.io/2013/09/24/myComputerHistory/</guid>
      <pubDate>Tue, 24 Sep 2013 08:21:04 GMT</pubDate>
      <description>
      <![CDATA[<p>你还记得当初拥有的第一台电脑吗？<br>]]>
      
      </description>
      <content:encoded><![CDATA[<p>你还记得当初拥有的第一台电脑吗？<br><a id="more"></a></p>
<h1 id="Dell_1420">Dell 1420</h1><p>我人生的第一台电脑是大二(2008)的时候买的，6K左右。无论是打游戏,看电影,编程序,写文档都少不了它的身影，它陪我走过了整个大学时光。放张图纪念一下：<br><img src="http://7xpbra.com1.z0.glb.clouddn.com/dell.jpg" alt="image"></p>
<h1 id="Macbook_pro">Macbook pro</h1><p>我的dell1420再用了5年左右，显卡就烧坏了。准备换个电脑，中间一直在犹豫要买什么牌子的，最后在同事的怂恿下想入手一台苹果电脑。时间是2013年9月20，正好当天苹果发布了最新的Macbook，第二天周六我就到香港买了一台15寸Macbook pro。嘿嘿，秀一下图：<br><img src="http://7xpbra.com1.z0.glb.clouddn.com/mac.jpg" alt="image"></p>
]]></content:encoded>
      <comments>http://fancymax.github.io/2013/09/24/myComputerHistory/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Delphi常用快捷键]]></title>
      <link>http://fancymax.github.io/2012/12/19/Delphi%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <guid>http://fancymax.github.io/2012/12/19/Delphi%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <pubDate>Wed, 19 Dec 2012 14:26:49 GMT</pubDate>
      <description>
      <![CDATA[<p>delphi是我学编程时的入门语言，用过一年多的时光，个人对它还是挺喜欢的。现在用的少了，一些快捷键和语法也有些遗忘了，这里对delphi的快捷键做个总结，留个纪念。嘿嘿，不知道还有多少人还用着这门语言？<br>]]>
      
      </description>
      <content:encoded><![CDATA[<p>delphi是我学编程时的入门语言，用过一年多的时光，个人对它还是挺喜欢的。现在用的少了，一些快捷键和语法也有些遗忘了，这里对delphi的快捷键做个总结，留个纪念。嘿嘿，不知道还有多少人还用着这门语言？<br><a id="more"></a></p>
<h1 id="代码标记和切换_Ctrl+Shift+NUM_、_Ctrl+NUM">代码标记和切换   Ctrl+Shift+NUM 、  Ctrl+NUM</h1><ul>
<li><p>Ctrl+Shift+NUM 在光标行设置最多九个临时标志号，对临时切换非常有用。<br>行的左边将出现一本书，封面有NUM，再按一次取消设置。</p>
</li>
<li><p>Ctrl+NUM 直接将光标跳到NUM处，NUM是用Ctrl+Shift+NUM设置的标号, NUM不能用小键盘。</p>
</li>
</ul>
<p><img src="http://images.cnitblog.com/blog2015/708791/201505/082022001733856.gif" alt="mark.gif">    </p>
<h1 id="光标移至文件头、文件尾_Ctrl+Home_、Ctrl+End">光标移至文件头、文件尾   Ctrl+Home 、Ctrl+End</h1><p> <img src="http://images.cnitblog.com/blog2015/708791/201505/082020126261379.gif" alt="jumpHome.gif"></p>
<h1 id="删除光标所在行_Ctrl+Y">删除光标所在行  Ctrl+Y</h1><p><img src="http://images.cnitblog.com/blog2015/708791/201505/082019273297683.gif" alt="/delete1.gif"></p>
<h1 id="光标在函数声明和函数定义处跳转_Ctrl+Shift+↓_、Ctrl+Shift+↑">光标在函数声明和函数定义处跳转  Ctrl+Shift+↓ 、Ctrl+Shift+↑</h1><p>光标在函数体内时，将光标快速移至当前函数声明处，反之亦然。<br><img src="http://images.cnitblog.com/blog2015/708791/201505/082020589237901.gif" alt="jumpmethod.gif"></p>
<h1 id="声明一个过程或函数后，直接生成过程或函数的名称_Ctrl+Shift+C">声明一个过程或函数后，直接生成过程或函数的名称  Ctrl+Shift+C</h1><p><img src="http://images.cnitblog.com/blog2015/708791/201505/081952484074730.gif" alt="createmethod.gif">   </p>
<h1 id="加速滚屏_Ctrl+鼠标转轮">加速滚屏    Ctrl+鼠标转轮</h1><h1 id="按住Alt,再进行选择,则是一种区域选择">按住Alt,再进行选择,则是一种区域选择</h1><p><img src="http://images.cnitblog.com/blog2015/708791/201505/082022422519367.gif" alt="select.gif"></p>
<h1 id="调试相关">调试相关</h1><p>F9  运行 </p>
<p>F8  StepOver </p>
<p>F7  TraceInto</p>
<p>F11,F12切换Editor,InSpector,FormDesigner.</p>
]]></content:encoded>
      <comments>http://fancymax.github.io/2012/12/19/Delphi%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[成长与感悟--工作一年半]]></title>
      <link>http://fancymax.github.io/2012/12/19/%E6%88%90%E9%95%BF%E4%B8%8E%E6%84%9F%E6%82%9F-%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%B9%B4%E5%8D%8A/</link>
      <guid>http://fancymax.github.io/2012/12/19/%E6%88%90%E9%95%BF%E4%B8%8E%E6%84%9F%E6%82%9F-%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%B9%B4%E5%8D%8A/</guid>
      <pubDate>Wed, 19 Dec 2012 14:13:36 GMT</pubDate>
      <description>
      <![CDATA[<p>2012年年底写的总结，拿出来和大家分享一下。<br>]]>
      
      </description>
      <content:encoded><![CDATA[<p>2012年年底写的总结，拿出来和大家分享一下。<br><a id="more"></a></p>
<h2 id="从找工作说起">从找工作说起</h2><p>本人自动化专业出身，本科毕业的时候，大部分同学都进了电厂做运行或检修，而我算是个另类。</p>
<p>主因是在大三的时候做了几个嵌入式项目，发现自己对编程很感兴趣，于是毅然决然想当个程序猿。毕业的时候凭着C语言和单片机的一点基础，找到了一家做行业软件的公司，感觉还蛮幸运的。</p>
<h2 id="入职初期">入职初期</h2><p>真正进入到部门大概是2011年八月中旬的样子。刚开始工作的时候座位排在部门经理和一位老员工中间倍感压力山大。</p>
<p>但是压力大，兴趣也大。虽然一开始什么也不懂，但是通过自己的努力慢慢弥补上了，加上大家的指导，很快进入状态。软件部的人也基本上是<strong>知无不言，言无不尽</strong>。</p>
<p>部门领导虽然平常很忙，但是心思细腻，经常会回复我的工作总结给我建议，还会教我一些小窍门，感觉备受鼓舞。</p>
<h2 id="一切从模仿开始">一切从模仿开始</h2><p>在我打好基础之后，就开始带着任务学习，感觉这是一种能够快速成长的方法。通过参与程序的BUG修改，了解老程序的原理。通过模仿然后举一反三可以自己编写程序。经过时间的积累，量变到质变，就可以在已有程序的基础上进行创新。</p>
<h2 id="重新学习自己需要的东西">重新学习自己需要的东西</h2><p>大学的时候主要用C语言，工作之后接触delphi是pascal语法，代码段之间需要使用begin和end包含起来，一开始很不适应，觉得很不简洁。可是等自己真正开始了解并熟悉这个语言的时候，我反而觉得begin和end包含代码段使程序结构变得特别清晰易懂，使用起来也挺顺手的。</p>
<h2 id="要学会“问”的技巧">要学会“问”的技巧</h2><p>当然也总结一些问问题的技巧：</p>
<ol>
<li>问对人，你要问的人，他必须对这个问题比较擅长，否则浪费两个人的时间。</li>
<li>选好时间，不要选择人家非常忙的时候问。</li>
<li>找准问题，能在google上找到答案的问题就不要问了。遇到特别棘手的问题无法解决的时候，一个比较好的办法就是收集尽量多的材料，把问题描述清楚，让更多的人参与进来给你一些建议，人多力量大，结合的意见越多越容易找到解决办法。</li>
</ol>
<h2 id="遇到困难，积极面对">遇到困难，积极面对</h2><p>工作中总会遇到各种各样的困难，消极对待只会越来越痛苦，反之积极面对最后战胜困难就很有成就感。</p>
<blockquote>
<p>之前提交程序，要修改成5个不同的版本提交到svn的不同的路径，一个流程下来花10分钟，特痛苦。</p>
<p>仔细想想，这个提交exe流程其实是一个重复的过程，为何不写一个程序让它自动执行呢？后来我花了一个星期用Python写了一个自动化提交的脚本，之后大家都用它愉快的提交程序了。</p>
</blockquote>
<h2 id="与第三方厂家沟通">与第三方厂家沟通</h2><p>有时候涉及到与第三方厂家的沟通，说实话比较痛苦。</p>
<p>这时候要有诚意，表现出互利共赢的态度，描述问题要清楚，对第三方装置有疑问，首先要确认不是自己错了，然后需要找好证据，比如要用以太网抓包工具收集底层报文的证据，而不要使用程序中的调试信息。</p>
<p>诚恳的态度永远是最好的沟通方法。当然也会遇到完全不买帐的第三方厂家，这时候就需要寻求帮助，找相关人员协助，不要自己一个人闷头痛苦。</p>
<h2 id="后记">后记</h2><p>现在想来特别羡慕当时的工作状态，感觉每天都在进步。这种状态或许再也找不回来了，又或者等我换家公司的时候能体会到？</p>
]]></content:encoded>
      <comments>http://fancymax.github.io/2012/12/19/%E6%88%90%E9%95%BF%E4%B8%8E%E6%84%9F%E6%82%9F-%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%B9%B4%E5%8D%8A/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>

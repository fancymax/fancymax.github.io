<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Programming is like Sex]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-12-20T03:13:33.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[max Lin]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[12306forMac 开发日记-上]]></title>
    <link href="http://yoursite.com/2015/12/20/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0-%E4%B8%8A/"/>
    <id>http://yoursite.com/2015/12/20/开发日记-上/</id>
    <published>2015-12-20T02:37:22.000Z</published>
    <updated>2015-12-20T03:13:33.000Z</updated>
    <content type="html"><![CDATA[<p>先谈谈做 Mac 版的初衷(很多人说市面上已经有那么多抢票软件了，你为什么还要重新发明轮子？)</p>
<a id="more"></a>
<p>最早是因为女朋友，她家是湖南的。从深圳到湖南那票叫一个难买。<br>去年别人介绍 买了一款心蓝的订票软件（可惜没有 Mac 版的）,装在我的虚拟机上，刷票刷了两个月总算买到回湖南的两张高铁票。<br>我的 Mac基本上开着虚拟机开了两个月没停，挺心疼的。另外女朋友用macbook基本没法开虚拟机，而我实在不想为了这个搞个双系统。 所以就想搞个 Mac 版的订票软件，借鉴一下心蓝的一些功能。</p>
<h1 id="Mac版的定位">Mac版的定位</h1><p>抢票的话我感觉基本看运气和软件关系不是太大，用手机抢完全 OK ，个人认为 Mac 版的功能应该偏重于检票。实时监控 60 天，基本上 90%可以买到票。 </p>
<h1 id="准备工作">准备工作</h1><p>如何开始呢，这里着重列出自己学习过程中感觉比较有用的东西供大家参考。</p>
<ul>
<li><p>关于Mac<br>苹果开发，最好就是买个Mac，Mac的型号不少，我主要推荐以下两款：</p>
<ul>
<li>预算够就直接买Macbook Pro 15寸(推荐16G内存)，大概12~15K左右，屏幕大性能高，便携性好，跑个虚拟机里面再开VS都是小意思。</li>
<li>如果预算不够，可以考虑买Mac mini主机(8G内存+SSD或Fushion Drive)，差不多5~6k，需要外接一个显示器。</li>
</ul>
</li>
<li><p>关于工具</p>
<ul>
<li>Dash<br>这个绝对是神器,超级好用的离线文档搜索工具。免费版有8秒的搜索等待。<br><img src="http://images2015.cnblogs.com/blog/708791/201511/708791-20151111174224009-881586110.png" alt=""></li>
<li>科学上网<br>这个不用我多说，我推荐用土行孙，大家自己上网搜吧。</li>
</ul>
</li>
<li><p>相关书籍</p>
<ul>
<li><p>OS X Human Interface Guidelines<br>在iBook 上可以找到，介绍OS X的界面设计规范。</p>
</li>
<li><p>The swift Programming language<br>同样在iBook上可以搜索到，主要就是介绍Swift语言，可以先通篇浏览一遍，后续遇到问题再去查。同时配合Dash查Cocoa的API，Perfect。</p>
</li>
<li><p>Cocoa Programming for Mac OS X(5th)<br>第五版以上，里面用的是Swift讲解，介绍的例子通俗易懂，全书的例子做一遍下来，开发简单的OS X程序不成问题。</p>
</li>
</ul>
</li>
</ul>
<h1 id="开发进度">开发进度</h1><p>经过三四个月的时间，总算是在mac上实现了订票的功能。最花时间的是两方面：</p>
<ul>
<li>一是12306的接口，各种坑，老是被封IP导致调试困难。</li>
<li>另外一个就是Cocoa，写界面相当麻烦，而且是现学现卖，一路过来特别折腾。</li>
</ul>
<p>下面我做的一些界面截图，留个纪念。<br><img src="http://images2015.cnblogs.com/blog/708791/201512/708791-20151215213943631-952430701.jpg" alt=""></p>
<p><img src="http://images2015.cnblogs.com/blog/708791/201512/708791-20151215213951724-2135344988.jpg" alt=""></p>
<p><img src="http://images2015.cnblogs.com/blog/708791/201512/708791-20151215213959131-1473971103.jpg" alt=""></p>
<p><img src="http://images2015.cnblogs.com/blog/708791/201512/708791-20151215214005271-1633616139.jpg" alt=""></p>
<p>回头想想这三个月进步还挺大，基本熟悉了Swift、Objective-c、以及Cocoa API，对订票的流程也混熟了。还有好多想法，但是总觉得时间太不够用了，只能用业余的时间来弄弄。</p>
<p>不管怎么说还是要继续努力，争取早日完成。我的目标是上架Mac Appstore，并达到10000用户量。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>先谈谈做 Mac 版的初衷(很多人说市面上已经有那么多抢票软件了，你为什么还要重新发明轮子？)</p>]]>
    
    </summary>
    
      <category term="Cocoa" scheme="http://yoursite.com/tags/Cocoa/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈WPF中的MVVM框架--MVVMFoundation]]></title>
    <link href="http://yoursite.com/2014/04/19/%E6%B5%85%E8%B0%88WPF%E4%B8%AD%E7%9A%84MVVM%E6%A1%86%E6%9E%B6-MVVMFoundation/"/>
    <id>http://yoursite.com/2014/04/19/浅谈WPF中的MVVM框架-MVVMFoundation/</id>
    <published>2014-04-19T14:22:25.000Z</published>
    <updated>2015-12-20T02:37:43.000Z</updated>
    <content type="html"><![CDATA[<p>先科普一下：什么是WPF，请看下图</p>
<p><img src="http://images.cnitblog.com/blog2015/708791/201504/201140330112092.jpg" width="550" height="400" alt="what is WPF" align="center"></p>
<p>微软对于WPF技术的构想是很宏大的，可惜普及率不高，不过如果你要做Windows客户端开发的话WPF技术还是值得一学的。</p>
<a id="more"></a>
<h1 id="什么是MVVM模式">什么是MVVM模式</h1><p>简单来说它是一种高级的UI设计模式。据我所知目前还运用在一些js框架中，比如<strong>AngularJS</strong>。其他的UI设计模式还包括MVC、MVP，个人觉得最强大的还是MVVM。</p>
<p>MVVM主体框架如下图：</p>
<p><img src="http://images.cnitblog.com/blog2015/708791/201504/201225530274012.jpg" width="500" height="400" alt="what is MVVM" align="center"></p>
<blockquote>
<ul>
<li>The Model is the entity that represents the business concept; it can be anything from a simple customer entity to a complex stock trade entity .</li>
<li>The View is the graphical control or set of controls responsible for rendering the Model data on screen .A View can be a WPF window, a Silverlight page, or just an XAML data template control .</li>
<li>The ViewModel is the magic behind everything .The ViewModel contains the UI logic, the commands, the events, and a reference to the Model .</li>
<li>In MVVM, the ViewModel is not in charge of updating the data displayed in the UI—thanks to the powerful data-binding engine provided by WPF and Silverlight, the ViewModel doesn’t need to do that .This is because the View is an observer of the ViewModel, so as soon as the ViewModel changes, the UI updates itself .For that to happen, the ViewModel must implement the INotifyPropertyChangedinterface and fire the PropertyChangedevent .</li>
</ul>
</blockquote>
<p>简单翻译一下（不全）</p>
<blockquote>
<ul>
<li>The Model 代表业务逻辑的实体类，可以是一个简单的顾客实体类，也可以是一个复杂的股票交易实体类。</li>
<li>The View 代表一个用户界面控件 …</li>
<li>The ViewModel 包括各种逻辑、命令、事件以及实体类的引用。</li>
</ul>
</blockquote>
<h1 id="什么是MVVMFoundation">什么是MVVMFoundation</h1><p><a href="http://mvvmfoundation.codeplex.com" target="_blank" rel="external">MVVMFoundation</a>是一个最简单的MVVM框架，官方介绍如下：</p>
<blockquote>
<p>MVVM Foundation is a library of classes that are very useful when building applications based on the Model-View-ViewModel philosophy. The library is small and concentrated on providing only the most indispensable tools needed by most MVVM application developers</p>
</blockquote>
<p>MVVMFoundation包含四大模块：</p>
<ul>
<li><p>ObservableObject：这里相当于ViewModelBase的概念，每一个ViewModel继承自该类，调用完成之后立即释放，防止内存泄露。</p>
</li>
<li><p>RelayCommand接口：封装command的声明，包括execution执行逻辑,可选的can-execute逻辑等。外部只需要实例化并Binding就可以简单使用。</p>
</li>
<li><p>Messenger:这里主要用在各种不同的ViewModel之间通信（比如相互关联的ViewModel、主从ViewModel等），当然也可以扩展成ViewModel与View之间进行通信。</p>
</li>
<li><p>PropertyObserver：主要是对INotifyPropertyChanged.PropertyChanged进行封装，可以通过其对某个对象的属性变更注册回调函数，当属性变更时便触发回调函数。</p>
</li>
</ul>
<h1 id="ObservableObject">ObservableObject</h1><p>实现ViewModel中的属性改变通知到绑定的控件的方法，相当于是所有Viewmodel的基类。</p>
<ol>
<li><p>使用时调用OnPropertyChange方法，则后台数据变化即可通知界面刷新</p>
<pre><code><span class="keyword">public</span> <span class="keyword">string</span> UserName
{
    <span class="keyword">get</span> { <span class="keyword">return</span> <span class="keyword">this</span>.user.UserName; }
    <span class="keyword">set</span>
    {
        <span class="keyword">this</span>.user.UserName = <span class="keyword">value</span>;
        OnPropertyChanged(<span class="string">"UserName"</span>);
    }
}
</code></pre></li>
<li><p>属性在View界面的绑定</p>
<pre><code>&lt;<span class="keyword">TextBox</span> <span class="keyword">Text</span>=<span class="string">"{Binding UserName}"</span> /&gt;
</code></pre></li>
</ol>
<h1 id="RelayCommand">RelayCommand</h1><p>用于在ViewModel中定义View中绑定的命令，代替了以前Winform的Click事件。</p>
<ol>
<li><p>在ViewModel中定义Command</p>
<pre><code><span class="keyword">public</span> ICommand BrowseImageCommand
{
<span class="keyword">get</span> { <span class="keyword">return</span> <span class="keyword">new</span> ICommand(BrowseImage); }
}

<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BrowseImage</span>(<span class="params"></span>)
</span>{
   ...
}
</code></pre></li>
<li><p>在View中的按钮关联此Command</p>
<pre><code>&lt;Button <span class="variable">Content=</span><span class="string">"浏览..."</span> <span class="variable">Command=</span><span class="string">"{Binding BrowseImageCommand}"</span>/&gt;
</code></pre></li>
</ol>
<h1 id="Messenger">Messenger</h1><p>可用于ViewModel之间的信息传递，可以用于ViewModel和View之间的信息传递。</p>
<ol>
<li><p>定义信息传输类</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ViewModelCommunication</span>
{
    <span class="function"><span class="keyword">static</span> <span class="title">ViewModelCommunication</span>(<span class="params"></span>)
    </span>{
        Messaging = <span class="keyword">new</span> Messenger();
    }

    <span class="keyword">public</span> <span class="keyword">static</span> Messenger Messaging { <span class="keyword">get</span>; <span class="keyword">set</span>; }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> DataIDInChanged { <span class="keyword">get</span> { <span class="keyword">return</span> <span class="string">"DataIDInChanged"</span>; } }
}
</code></pre></li>
<li><p>在需要通知的类中注册要通知的信息</p>
<pre><code>ViewModelCommunication.Messaging.Register<span class="params">(ViewModelCommunication.DataIDInChanged,<span class="params">(Action&lt;string&gt;)</span><span class="params">(param =&gt; SetLastSelectedDataID<span class="params">(param)</span>)</span>)</span>; 
</code></pre></li>
<li><p>当对应的消息出现时，通知已经注册的类</p>
<pre><code><span class="tag">ViewModelCommunication</span><span class="class">.Messaging</span><span class="class">.NotifyColleagues</span>(<span class="tag">ViewModelCommunication</span><span class="class">.DataIDInChanged</span>, <span class="tag">DataID</span><span class="class">.ToString</span>()); 
</code></pre></li>
</ol>
<h1 id="PropertyObserver">PropertyObserver</h1><p>主要用于对对象的属性监听，属性变更后可触发已注册的回调函数。</p>
<ol>
<li><p>注册要监听对象的属性及回调函数</p>
<pre><code>PropertyObserver&lt;UserInfoViewModel&gt; userInfoAfterObserver;
<span class="function"><span class="keyword">public</span> <span class="title">MainWindowViewModel</span><span class="params">()</span>
</span>{
    UserInfoBefore = <span class="keyword">new</span> UserInfoViewModel();
    userInfoAfterObserver = <span class="keyword">new</span> PropertyObserver&lt;UserInfoViewModel&gt;(UserInfoAfter)
        .RegisterHandler(UserInfo =&gt; UserInfo.Age, <span class="keyword">this</span>.AgeChangedCallback);
}
</code></pre></li>
<li><p>实现回调函数</p>
<pre><code><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">AgeChangedCallback</span><span class="params">(UserInfoViewModel userInfo)</span>
</span>{
    MessageBox.Show(<span class="string">"Property Age changed"</span>); 
}
</code></pre></li>
</ol>
<p>以上就是MVVMFoundation框架的主要使用方法，感兴趣的人可以用用看～欢迎留言交流心得～</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>先科普一下：什么是WPF，请看下图</p>
<p><img src="http://images.cnitblog.com/blog2015/708791/201504/201140330112092.jpg" width = "550" height = "400" alt="what is WPF" align=center /></p>
<p>微软对于WPF技术的构想是很宏大的，可惜普及率不高，不过如果你要做Windows客户端开发的话WPF技术还是值得一学的。</p>]]>
    
    </summary>
    
      <category term="WPF,MVVM" scheme="http://yoursite.com/tags/WPF-MVVM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[成长与感悟--工作两年半]]></title>
    <link href="http://yoursite.com/2013/12/19/%E6%88%90%E9%95%BF%E4%B8%8E%E6%84%9F%E6%82%9F-%E5%B7%A5%E4%BD%9C%E4%B8%A4%E5%B9%B4%E5%8D%8A/"/>
    <id>http://yoursite.com/2013/12/19/成长与感悟-工作两年半/</id>
    <published>2013-12-19T14:19:18.000Z</published>
    <updated>2015-12-19T14:20:32.000Z</updated>
    <content type="html"><![CDATA[<p>13年年初的时候，机缘巧合负责了一个较大的项目。在这之前我都是单枪匹马，这是我第一次负责团队型的项目。记得当时压力很大，从3月~7月我的月平均加班时间超过了90个小时。还好最后功夫不负有心人，项目历时7个月顺利完成并部署，得到了用户的肯定。</p>
<p>以下是我在项目过程中的一些总结和思考，欢迎拍砖~</p>
<a id="more"></a>
<h2 id="直接跳进深水区">直接跳进深水区</h2><p>这是学习新事物的一种最直接，也最冒险的方法。<br>选择一项新技术，比如F#，基于实际的时间表，在真实的项目中使用它。这会带来压力，但如果运用得当，将特别有效率。</p>
<p>当时我在项目的过程中，直接学习了项目管理和各种要使用的新技术，边学边用，效率奇高无比。当然压力也很大，当时想的是项目做失败就直接离职了。</p>
<h2 id="做计划的重要性">做计划的重要性</h2><p>以前做小项目的时候没有认识到计划的重要性。然后在做大项目中吃了很多亏，才认识到计划的重要性。</p>
<p>现在认识到无论是针对日常工作和学习都要有个计划。</p>
<blockquote>
<p>比如：以前我要学习一个技术，不管三七二十一马上开始，恨不得一口气吃成胖子；现在的我就会计划几个阶段，每个阶段有个目标。</p>
</blockquote>
<h2 id="一次只能做好一件事">一次只能做好一件事</h2><p>当时项目初期时分工不明确，有很多紧急的任务堆积在我身上。当时我明显感觉脑子转不过来，而且多个任务互相影响压力巨大，怎么办？</p>
<ul>
<li>我先去寻找问题的解决思路，有了思路解决后续就交给有空余时间的人处理，自己要抽身出来协调项目工作。</li>
<li>先把简单的实现，后面再集中火力攻克难关。</li>
</ul>
<p>另外保证项目组成员一个阶段只做一件事。这样提高了效率，减轻了压力，也加快了项目的进展。</p>
<h2 id="享受过程">享受过程</h2><p>需要认识到到达目标之前的曲折性。<strong>要有持续改进与提高的心态，而不是想着一开始就做的完美</strong>。<br>否则一开始就要达到完美的目标，最后极可能导致失败。</p>
<p>当时经常性的会有非常沮丧的心理，总觉得项目要失败，后来总结了以下几点安慰自己：</p>
<ul>
<li>接受现实（改变心态，告诉自已，是的我现在是克服不了，我也没有能力处理这个事情）</li>
<li>将消极的情况变为积极，找到失败的闪光点和机会（虽然的败了，这是成长的机会，让我更了解自已）</li>
<li>分心，将注意力转向别处，但不是逃避（总是执着于分析每一种感情，想法是有害的，反复思考并不一定对人有帮助，可以先听听音乐，跑跑步，与别人交流交流，回头再来思考，也许有更好的点子）。</li>
</ul>
<h2 id="关于坚持">关于坚持</h2><p>如果觉得做不下去了，就硬着头皮坚持做，然后就类似于麻木了，适应了，那种望而却步的感觉会逐渐自动退去。惊人的简单，但事实就是如此，硬着头皮，过了那个情绪上最艰难的时候，也就适应了。当然在坚持的过程中，还需要思考如何改进，如何提高效率（通过读书或向别人学习）。</p>
<h2 id="关于学习和培养兴趣">关于学习和培养兴趣</h2><p>对未来的一些规划，比如</p>
<ul>
<li>学习一门新语言</li>
<li>掌握一些通用的技术，比如正则表达式、进程间通信、文件存储 </li>
<li>掌握通用的软件思想，比如设计模式，比如MVC、MVVM </li>
<li>使用牛逼的编辑器，比如vim</li>
<li>跟踪技术博客</li>
</ul>
<p>借用一句话来结尾：</p>
<blockquote>
<p>无论怎样学习技术是一种态度，无论你在什么公司、位于何种职位、从事何种技术，学习前辈的先进方法，永远是一条最快的提升捷径。站在巨人的肩膀上，迎接世界的挑战。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>13年年初的时候，机缘巧合负责了一个较大的项目。在这之前我都是单枪匹马，这是我第一次负责团队型的项目。记得当时压力很大，从3月~7月我的月平均加班时间超过了90个小时。还好最后功夫不负有心人，项目历时7个月顺利完成并部署，得到了用户的肯定。</p>
<p>以下是我在项目过程中的一些总结和思考，欢迎拍砖~</p>]]>
    
    </summary>
    
      <category term="成长与感悟" scheme="http://yoursite.com/tags/%E6%88%90%E9%95%BF%E4%B8%8E%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Delphi常用快捷键]]></title>
    <link href="http://yoursite.com/2012/12/19/Delphi%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2012/12/19/Delphi常用快捷键/</id>
    <published>2012-12-19T14:26:49.000Z</published>
    <updated>2015-12-19T14:30:51.000Z</updated>
    <content type="html"><![CDATA[<p>delphi是我学编程时的入门语言，用过一年多的时光，个人对它还是挺喜欢的。现在用的少了，一些快捷键和语法也有些遗忘了，这里对delphi的快捷键做个总结，留个纪念。嘿嘿，不知道还有多少人还用着这门语言？<br><a id="more"></a></p>
<h1 id="代码标记和切换_Ctrl+Shift+NUM_、_Ctrl+NUM">代码标记和切换   Ctrl+Shift+NUM 、  Ctrl+NUM</h1><ul>
<li><p>Ctrl+Shift+NUM 在光标行设置最多九个临时标志号，对临时切换非常有用。<br>行的左边将出现一本书，封面有NUM，再按一次取消设置。</p>
</li>
<li><p>Ctrl+NUM 直接将光标跳到NUM处，NUM是用Ctrl+Shift+NUM设置的标号, NUM不能用小键盘。</p>
</li>
</ul>
<p><img src="http://images.cnitblog.com/blog2015/708791/201505/082022001733856.gif" alt="mark.gif">    </p>
<h1 id="光标移至文件头、文件尾_Ctrl+Home_、Ctrl+End">光标移至文件头、文件尾   Ctrl+Home 、Ctrl+End</h1><p> <img src="http://images.cnitblog.com/blog2015/708791/201505/082020126261379.gif" alt="jumpHome.gif"></p>
<h1 id="删除光标所在行_Ctrl+Y">删除光标所在行  Ctrl+Y</h1><p><img src="http://images.cnitblog.com/blog2015/708791/201505/082019273297683.gif" alt="/delete1.gif"></p>
<h1 id="光标在函数声明和函数定义处跳转_Ctrl+Shift+↓_、Ctrl+Shift+↑">光标在函数声明和函数定义处跳转  Ctrl+Shift+↓ 、Ctrl+Shift+↑</h1><p>光标在函数体内时，将光标快速移至当前函数声明处，反之亦然。<br><img src="http://images.cnitblog.com/blog2015/708791/201505/082020589237901.gif" alt="jumpmethod.gif"></p>
<h1 id="声明一个过程或函数后，直接生成过程或函数的名称_Ctrl+Shift+C">声明一个过程或函数后，直接生成过程或函数的名称  Ctrl+Shift+C</h1><p><img src="http://images.cnitblog.com/blog2015/708791/201505/081952484074730.gif" alt="createmethod.gif">   </p>
<h1 id="加速滚屏_Ctrl+鼠标转轮">加速滚屏    Ctrl+鼠标转轮</h1><h1 id="按住Alt,再进行选择,则是一种区域选择">按住Alt,再进行选择,则是一种区域选择</h1><p><img src="http://images.cnitblog.com/blog2015/708791/201505/082022422519367.gif" alt="select.gif"></p>
<h1 id="调试相关">调试相关</h1><p>F9  运行 </p>
<p>F8  StepOver </p>
<p>F7  TraceInto</p>
<p>F11,F12切换Editor,InSpector,FormDesigner.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>delphi是我学编程时的入门语言，用过一年多的时光，个人对它还是挺喜欢的。现在用的少了，一些快捷键和语法也有些遗忘了，这里对delphi的快捷键做个总结，留个纪念。嘿嘿，不知道还有多少人还用着这门语言？<br>]]>
    
    </summary>
    
      <category term="Dephi" scheme="http://yoursite.com/tags/Dephi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[成长与感悟--工作一年半]]></title>
    <link href="http://yoursite.com/2012/12/19/%E6%88%90%E9%95%BF%E4%B8%8E%E6%84%9F%E6%82%9F-%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%B9%B4%E5%8D%8A/"/>
    <id>http://yoursite.com/2012/12/19/成长与感悟-工作一年半/</id>
    <published>2012-12-19T14:13:36.000Z</published>
    <updated>2015-12-19T14:16:31.000Z</updated>
    <content type="html"><![CDATA[<p>2012年年底写的总结，拿出来和大家分享一下。<br><a id="more"></a></p>
<h2 id="从找工作说起">从找工作说起</h2><p>本人自动化专业出身，本科毕业的时候，大部分同学都进了电厂做运行或检修，而我算是个另类。</p>
<p>主因是在大三的时候做了几个嵌入式项目，发现自己对编程很感兴趣，于是毅然决然想当个程序猿。毕业的时候凭着C语言和单片机的一点基础，找到了一家做行业软件的公司，感觉还蛮幸运的。</p>
<h2 id="入职初期">入职初期</h2><p>真正进入到部门大概是2011年八月中旬的样子。刚开始工作的时候座位排在部门经理和一位老员工中间倍感压力山大。</p>
<p>但是压力大，兴趣也大。虽然一开始什么也不懂，但是通过自己的努力慢慢弥补上了，加上大家的指导，很快进入状态。软件部的人也基本上是<strong>知无不言，言无不尽</strong>。</p>
<p>部门领导虽然平常很忙，但是心思细腻，经常会回复我的工作总结给我建议，还会教我一些小窍门，感觉备受鼓舞。</p>
<h2 id="一切从模仿开始">一切从模仿开始</h2><p>在我打好基础之后，就开始带着任务学习，感觉这是一种能够快速成长的方法。通过参与程序的BUG修改，了解老程序的原理。通过模仿然后举一反三可以自己编写程序。经过时间的积累，量变到质变，就可以在已有程序的基础上进行创新。</p>
<h2 id="重新学习自己需要的东西">重新学习自己需要的东西</h2><p>大学的时候主要用C语言，工作之后接触delphi是pascal语法，代码段之间需要使用begin和end包含起来，一开始很不适应，觉得很不简洁。可是等自己真正开始了解并熟悉这个语言的时候，我反而觉得begin和end包含代码段使程序结构变得特别清晰易懂，使用起来也挺顺手的。</p>
<h2 id="要学会“问”的技巧">要学会“问”的技巧</h2><p>当然也总结一些问问题的技巧：</p>
<ol>
<li>问对人，你要问的人，他必须对这个问题比较擅长，否则浪费两个人的时间。</li>
<li>选好时间，不要选择人家非常忙的时候问。</li>
<li>找准问题，能在google上找到答案的问题就不要问了。遇到特别棘手的问题无法解决的时候，一个比较好的办法就是收集尽量多的材料，把问题描述清楚，让更多的人参与进来给你一些建议，人多力量大，结合的意见越多越容易找到解决办法。</li>
</ol>
<h2 id="遇到困难，积极面对">遇到困难，积极面对</h2><p>工作中总会遇到各种各样的困难，消极对待只会越来越痛苦，反之积极面对最后战胜困难就很有成就感。</p>
<blockquote>
<p>之前提交程序，要修改成5个不同的版本提交到svn的不同的路径，一个流程下来花10分钟，特痛苦。</p>
<p>仔细想想，这个提交exe流程其实是一个重复的过程，为何不写一个程序让它自动执行呢？后来我花了一个星期用Python写了一个自动化提交的脚本，之后大家都用它愉快的提交程序了。</p>
</blockquote>
<h2 id="与第三方厂家沟通">与第三方厂家沟通</h2><p>有时候涉及到与第三方厂家的沟通，说实话比较痛苦。</p>
<p>这时候要有诚意，表现出互利共赢的态度，描述问题要清楚，对第三方装置有疑问，首先要确认不是自己错了，然后需要找好证据，比如要用以太网抓包工具收集底层报文的证据，而不要使用程序中的调试信息。</p>
<p>诚恳的态度永远是最好的沟通方法。当然也会遇到完全不买帐的第三方厂家，这时候就需要寻求帮助，找相关人员协助，不要自己一个人闷头痛苦。</p>
<h2 id="后记">后记</h2><p>现在想来特别羡慕当时的工作状态，感觉每天都在进步。这种状态或许再也找不回来了，又或者等我换家公司的时候能体会到？</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2012年年底写的总结，拿出来和大家分享一下。<br>]]>
    
    </summary>
    
      <category term="成长与感悟" scheme="http://yoursite.com/tags/%E6%88%90%E9%95%BF%E4%B8%8E%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
</feed>
